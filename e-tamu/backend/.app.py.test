from flask import Flask, jsonify, request

from flask_pymongo import PyMongo

from bson.json_util import dumps

from bson.objectid import ObjectId

from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)

app.secret_key = "secretkey"

app.config['MONGO_URI'] = 'mongodb://localhost:27017/etamu'

mongo = PyMongo(app)

@app.route('/user', methods=['POST'])
def add_users():
    _json = request.json
    _email = _json['email']
    _pass = _json['password']
    _nama = _json['nama']
    _no_hp = _json['no_hp']
    _level = _json['level']

    if _email and _pass and _nama and _no_hp and _level and request.method == 'POST':
        _hash = generate_password_hash(_pass)

        mongo.db.users.insert_one({
            'email': _email,
            'password':_hash,
            'nama':_nama,
            'no_hp':_no_hp,
            'level':_level
        })

        resp = jsonify('User added')
        resp.status_code = 200

        return resp
    
    return not_found()

@app.route('/user', methods=['GET'])
def get_users():
    users = mongo.db.users.find()
    resp = dumps(users)
    return resp

@app.route('/user/<id>', methods=['GET'])
def get_user(id):
    user = mongo.db.users.find_one({'_id':ObjectId(id)})
    resp = dumps(user)
    return resp

@app.route('/user/<id>', methods=['PUT'])
def update_user(id):
    _id = id
    _json = request.json
    _email = _json['email']
    _pass = _json['password']
    _nama = _json['nama']
    _no_hp = _json['no_hp']
    _level = _json['level']

    if _email and _pass and _nama and _level and _no_hp and _id and request.method == 'PUT':
        _hash = generate_password_hash(_pass)

        mongo.db.users.update_one(
            {'_id': ObjectId(_id)},
            {"$set":{
                'email': _email,
                'password':_hash,
                'nama':_nama,
                'no_hp':_no_hp,
                'level':_level
            }}
        )
        resp = jsonify('User Updated successfully')
        return resp
    
    return not_found()

@app.route('/user/<id>',methods=['DELETE'])
def del_user(id):
    mongo.db.users.delete_one({'_id':ObjectId(id)})
    resp = jsonify('User Deleted successfully')
    return resp

@app.errorhandler(404)
def not_found(error=None):
    message = {
        'status': 404,
        'message': 'Not Found'
    }
    resp = jsonify(message)
    resp.status_code = 404

    return resp


if(__name__=="__main__"):
    app.run(debug=True)

